stages:
  - security_scan
  - test
  - build_image
  - validate_iac
  - deploy_infrastructure
  - deploy_app
  - mirror

variables:
  ECR_REPOSITORY_NAME: etalente-backend
  ECR_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  ECR_LATEST_TAG: latest

.aws_base:
  image: 
    name: amazon/aws-cli:latest
    entrypoint: ["/usr/bin/env", "bash", "-l", "-c"]
  before_script:
    - aws --version
    - echo "AWS CLI configured for region $AWS_REGION"

validate_iac:
  extends: .aws_base
  stage: validate_iac
  script:
    - echo "Validating CloudFormation templates..."
    - aws cloudformation validate-template --template-body file://aws/cloudformation/shared/networking.yaml
    - aws cloudformation validate-template --template-body file://aws/cloudformation/shared/security-groups.yaml
    - aws cloudformation validate-template --template-body file://aws/cloudformation/shared/rds.yaml
    - aws cloudformation validate-template --template-body file://aws/cloudformation/shared/alb.yaml
    - aws cloudformation validate-template --template-body file://aws/cloudformation/shared/ecs-cluster.yaml
    - aws cloudformation validate-template --template-body file://aws/cloudformation/shared/ecr-repositories.yaml
    - aws cloudformation validate-template --template-body file://aws/cloudformation/application/ecs-service.yaml
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/**/*.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

deploy_infrastructure:
  extends: .aws_base
  stage: deploy_infrastructure
  script:
    - echo "Deploying Shared Networking CloudFormation stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/shared/networking.yaml --stack-name ${ProjectName}-NetworkingStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName --region $AWS_REGION
    - |
      VPC_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-NetworkingStack --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue" --output text)
      PRIVATE_SUBNET_1A_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-NetworkingStack --query "Stacks[0].Outputs[?OutputKey=='PrivateSubnet1aId'].OutputValue" --output text)
      PRIVATE_SUBNET_1B_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-NetworkingStack --query "Stacks[0].Outputs[?OutputKey=='PrivateSubnet1bId'].OutputValue" --output text)
      PUBLIC_SUBNET_1A_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-NetworkingStack --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet1aId'].OutputValue" --output text)
      PUBLIC_SUBNET_1B_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-NetworkingStack --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet1bId'].OutputValue" --output text)
    - echo "Deploying Shared Security Groups CloudFormation stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/shared/security-groups.yaml --stack-name ${ProjectName}-SecurityGroupsStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName VpcId=$VPC_ID --region $AWS_REGION
    - |
      RDS_SECURITY_GROUP_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-SecurityGroupsStack --query "Stacks[0].Outputs[?OutputKey=='RdsSecurityGroupId'].OutputValue" --output text)
      ALB_SECURITY_GROUP_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-SecurityGroupsStack --query "Stacks[0].Outputs[?OutputKey=='AlbSecurityGroupId'].OutputValue" --output text)
      ECS_TASKS_SECURITY_GROUP_ID=$(aws cloudformation describe-stacks --stack-name ${ProjectName}-SecurityGroupsStack --query "Stacks[0].Outputs[?OutputKey=='EcsTasksSecurityGroupId'].OutputValue" --output text)
    - echo "Deploying Shared RDS CloudFormation stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/shared/rds.yaml --stack-name ${ProjectName}-RdsStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName VpcId=$VPC_ID PrivateSubnet1aId=$PRIVATE_SUBNET_1A_ID PrivateSubnet1bId=$PRIVATE_SUBNET_1B_ID RdsSecurityGroupId=$RDS_SECURITY_GROUP_ID DBMasterUserPassword=$DB_MASTER_PASSWORD --region $AWS_REGION
    - echo "Deploying Shared ALB CloudFormation stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/shared/alb.yaml --stack-name ${ProjectName}-AlbStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName VpcId=$VPC_ID PublicSubnet1aId=$PUBLIC_SUBNET_1A_ID PublicSubnet1bId=$PUBLIC_SUBNET_1B_ID AlbSecurityGroupId=$ALB_SECURITY_GROUP_ID --region $AWS_REGION
    - echo "Deploying Shared ECS Cluster CloudFormation stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/shared/ecs-cluster.yaml --stack-name ${ProjectName}-EcsClusterStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName --region $AWS_REGION
    - echo "Deploying Shared ECR Repositories CloudFormation stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/shared/ecr-repositories.yaml --stack-name ${ProjectName}-EcrRepositoriesStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName --region $AWS_REGION
    
    - echo "--- Listing Available CloudFormation Exports ---"
    - aws cloudformation list-exports
    - echo "--------------------------------------------"

    - echo "Deploying Backend Application ECS Service stack with a placeholder image..."
    - aws cloudformation deploy --template-file aws/cloudformation/application/ecs-service.yaml --stack-name ${ProjectName}-BackendServiceStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName BackendImageUri="public.ecr.aws/docker/library/hello-world:latest" DesiredCount=0 DBMasterUserPassword=$DB_MASTER_PASSWORD JwtSecret=$JWT_SECRET --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/**/*.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

test:
  stage: test
  image: gradle:jdk21
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "Running unit and integration tests..."
    - make test
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

security_scan:
  stage: security_scan
  image:
    name: "zricethezav/gitleaks"
    entrypoint: [""]
  script:
    - gitleaks detect --source . --verbose --report-path gitleaks-report.json
  artifacts:
    paths:
      - gitleaks-report.json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

build_image:
  stage: build_image
  image: docker:latest
  services:
    - docker:dind
  needs:
    - test
    - security_scan
  before_script:
    - apk add --no-cache aws-cli
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  script:
    - |
      IMAGE_URI_COMMIT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG}"
      IMAGE_URI_LATEST="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}"
      echo "Building Docker image..."
      docker build --platform linux/amd64 -t $IMAGE_URI_COMMIT -t $IMAGE_URI_LATEST .
      echo "Pushing Docker image to ECR..."
      docker push $IMAGE_URI_COMMIT
      docker push $IMAGE_URI_LATEST
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

deploy_app:
  extends: .aws_base
  stage: deploy_app
  script:
    - echo "Updating ECS service via CloudFormation to force a new deployment..."
    - aws cloudformation deploy --template-file aws/cloudformation/application/ecs-service.yaml --stack-name ${ProjectName}-BackendServiceStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName BackendImageUri="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG}" DBMasterUserPassword=$DB_MASTER_PASSWORD JwtSecret=$JWT_SECRET --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      needs:
        - build_image

mirror_to_github:
  stage: mirror
  image: alpine:latest
  before_script:
    - apk add --no-cache git openssh
    - git config --global user.email "$GITHUB_EMAIL"
    - git config --global user.name "$GITHUB_USERNAME"
  script:
    - git remote add github https://$GITHUB_TOKEN@github.com/$GITHUB_USERNAME/$GITHUB_PROJECT.git
    - git push github HEAD:main
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  allow_failure: true
