 Final Backend API Requirements for Frontend Integration

  Here are the necessary changes for the backend API to fully support the new, robust authentication and profile creation flows.

  1. High-Priority: `Complete Profile` Endpoint for New Users

   * Context: A user who signs up and logs in for the first time is marked as isNewUser: true. If they leave and come back, they are still logged in but need a way to
     complete their profile. The old registration endpoints require a one-time token they no longer have.
   * Requirement: An authenticated endpoint is needed for a newUser to submit their initial profile details.
   * Endpoint: PUT /api/profile/me (or the already created POST /api/profile/complete-profile)
   * Details:
       * It must be a protected endpoint that requires the user's session JWT (Authorization: Bearer <token>).
       * It should accept a CompleteProfileRequest body containing the necessary fields (e.g., firstName, lastName, companyName, contactNumber, etc.).
       * Crucially, upon successfully updating the user's profile, it must return a VerifyTokenResponse object. This response needs to contain:
           1. A new JWT where the isNewUser claim is now set to false.
           2. The complete UserDto object.
   * Impact: This is critical. Without this, users who don't complete their profile in their very first session will be permanently stuck in a newUser state.

  2. Data Format: Standardized Phone Numbers (E.164)

   * Context: The frontend now uses an international telephone input component. This component provides the phone number as a standardized object. The frontend will send
     the number to the backend in the international E.164 format.
   * Requirement: The backend must be prepared to receive and store phone numbers in the E.164 string format (e.g., +14155552671).
   * Affected Fields: contactNumber and alternateContactNumber in all relevant DTOs (CandidateRegistrationDto, HiringManagerRegistrationDto, CompleteProfileRequest).
   * Details:
       * The backend should expect a string for these fields.
       * The database column should be a VARCHAR capable of storing this format.
   * Impact: This ensures data consistency and will be vital for any future integrations, such as sending SMS notifications.

  3. Recommended: Enhance `/api/auth/session` Endpoint

   * Context: The GET /api/auth/session endpoint is used by the frontend on every application load to verify the user's session. Currently, it returns minimal information.
   * Recommendation: This endpoint should return the full `UserDto` object, just like the /api/auth/verify endpoint does.
   * Impact: This is a quality-of-life improvement. It ensures the frontend always has the freshest possible user data (like firstName, lastName) on startup, preventing
     reliance on potentially stale data stored in the browser's localStorage.

  ---

  Once these three items are addressed, the frontend and backend will be fully synchronized for a seamless and robust user experience.
